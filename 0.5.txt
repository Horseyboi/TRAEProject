* Direct rocket base damage reduced from 33 to 25
* Snowman cannon homing radius reduced by 25%
* Chlorophyte bullet/arrow max homing distance increased by 20%
* Malaise inflicts poison instead of weak
* Cursed Inferno DoT reduced from 48 to 32 (vanilla value: 24)
* Shadowflame DoT reduced from 60 to 36 (vanilla value: 15
Vortex Beater rocket:

				if (alpha < 170)
				{
					float num222 = 3f;
					for (int num223 = 0; (float)num223 < num222; num223++)
					{
						int num224 = Dust.NewDust(position, 1, 1, 229);
						Main.dust[num224].position = base.Center - velocity / num222 * num223;
						Dust dust3 = Main.dust[num224];
						dust3.velocity *= 0f;
						Main.dust[num224].noGravity = true;
						Main.dust[num224].alpha = 200;
						Main.dust[num224].scale = 0.5f;
					}
				}
				float num225 = (float)Math.Sqrt(velocity.X * velocity.X + velocity.Y * velocity.Y);
				float num226 = localAI[0];
				if (num226 == 0f)
				{
					localAI[0] = num225;
					num226 = num225;
				}
				if (alpha > 0)
				{
					alpha -= 25;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				float num227 = position.X;
				float num228 = position.Y;
				float num229 = 800f;
				bool flag7 = false;
				int num230 = 0;
				ai[0]++;
				if (ai[0] > 20f)
				{
					ai[0]--;
					if (ai[1] == 0f)
					{
						for (int num231 = 0; num231 < 200; num231++)
						{
							if (Main.npc[num231].CanBeChasedBy(this) && (ai[1] == 0f || ai[1] == (float)(num231 + 1)))
							{
								float num232 = Main.npc[num231].position.X + (float)(Main.npc[num231].width / 2);
								float num233 = Main.npc[num231].position.Y + (float)(Main.npc[num231].height / 2);
								float num234 = Math.Abs(position.X + (float)(width / 2) - num232) + Math.Abs(position.Y + (float)(height / 2) - num233);
								if (num234 < num229 && Collision.CanHit(new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2)), 1, 1, Main.npc[num231].position, Main.npc[num231].width, Main.npc[num231].height))
								{
									num229 = num234;
									num227 = num232;
									num228 = num233;
									flag7 = true;
									num230 = num231;
								}
							}
						}
						if (flag7)
						{
							ai[1] = num230 + 1;
						}
						flag7 = false;
					}
					if (ai[1] != 0f)
					{
						int num235 = (int)(ai[1] - 1f);
						if (Main.npc[num235].active && Main.npc[num235].CanBeChasedBy(this, ignoreDontTakeDamage: true))
						{
							float num236 = Main.npc[num235].position.X + (float)(Main.npc[num235].width / 2);
							float num237 = Main.npc[num235].position.Y + (float)(Main.npc[num235].height / 2);
							float num238 = Math.Abs(position.X + (float)(width / 2) - num236) + Math.Abs(position.Y + (float)(height / 2) - num237);
							if (num238 < 1000f)
							{
								flag7 = true;
								num227 = Main.npc[num235].position.X + (float)(Main.npc[num235].width / 2);
								num228 = Main.npc[num235].position.Y + (float)(Main.npc[num235].height / 2);
							}
						}
					}
					if (!friendly)
					{
						flag7 = false;
					}
					if (flag7)
					{
						float num239 = num226;
						Vector2 vector31 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num240 = num227 - vector31.X;
						float num241 = num228 - vector31.Y;
						float num242 = (float)Math.Sqrt(num240 * num240 + num241 * num241);
						float num243 = num242;
						num242 = num239 / num242;
						num240 *= num242;
						num241 *= num242;
						int num244 = 8;
						velocity.X = (velocity.X * (float)(num244 - 1) + num240) / (float)num244;
						velocity.Y = (velocity.Y * (float)(num244 - 1) + num241) / (float)num244;
					}
				}


DRAW CODE
Vector2 vector82 = proj.position + new Vector2(proj.width, proj.height) / 2f + Vector2.UnitY * proj.gfxOffY - screenPosition;
				Texture2D value82 = TextureAssets.Projectile[proj.type].get_Value();
				Microsoft.Xna.Framework.Color color85 = proj.GetAlpha(projectileColor);
				Vector2 origin21 = new Vector2(value82.Width, value82.Height) / 2f;
				float num326 = proj.rotation;
				Vector2 vector83 = Vector2.One * proj.scale;
				Microsoft.Xna.Framework.Rectangle? sourceRectangle5 = null;

value82 = TextureAssets.GlowMask[193].get_Value();
					EntitySpriteDraw(value82, vector82, null, new Microsoft.Xna.Framework.Color(127, 127, 127, 0), proj.rotation, origin21, proj.scale, dir);
				}


EXPLOSION 
SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 103);
			position = base.Center;
			width = (height = 144);
			position.X -= width / 2;
			position.Y -= height / 2;
			for (int num276 = 0; num276 < 4; num276++)
			{
				int num277 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
			}
			for (int num278 = 0; num278 < 40; num278++)
			{
				int num279 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 0, default(Color), 2.5f);
				Main.dust[num279].noGravity = true;
				Dust dust2 = Main.dust[num279];
				dust2.velocity *= 3f;
				num279 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 100, default(Color), 1.5f);
				dust2 = Main.dust[num279];
				dust2.velocity *= 2f;
				Main.dust[num279].noGravity = true;
			}
			for (int num280 = 0; num280 < 1; num280++)
			{
				int num281 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Gore gore2 = Main.gore[num281];
				gore2.velocity *= 0.3f;
				Main.gore[num281].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num281].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}