if (aiStyle == 11)
	{
		defense = defDefense;
		if (this.ai[0] == 0f && Main.netMode != 1)
		{
			TargetClosest();
			this.ai[0] = 1f;
			if (type != 68)
			{
				int num156 = NewNPC((int)(position.X + (float)(width / 2)), (int)position.Y + height / 2, 36, whoAmI);
				Main.npc[num156].ai[0] = -1f;
				Main.npc[num156].ai[1] = whoAmI;
				Main.npc[num156].target = target;
				Main.npc[num156].netUpdate = true;
				num156 = NewNPC((int)(position.X + (float)(width / 2)), (int)position.Y + height / 2, 36, whoAmI);
				Main.npc[num156].ai[0] = 1f;
				Main.npc[num156].ai[1] = whoAmI;
				Main.npc[num156].ai[3] = 150f;
				Main.npc[num156].target = target;
				Main.npc[num156].netUpdate = true;
			}
		}
		if ((type == 68 || Main.netMode == 1) && localAI[0] == 0f)
		{
			localAI[0] = 1f;
			SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
		}
		if (Main.player[target].dead || Math.Abs(position.X - Main.player[target].position.X) > 2000f || Math.Abs(position.Y - Main.player[target].position.Y) > 2000f)
		{
			TargetClosest();
			if (Main.player[target].dead || Math.Abs(position.X - Main.player[target].position.X) > 2000f || Math.Abs(position.Y - Main.player[target].position.Y) > 2000f)
			{
				this.ai[1] = 3f;
			}
		}
		if ((type == 68 || Main.dayTime) && this.ai[1] != 3f && this.ai[1] != 2f)
		{
			this.ai[1] = 2f;
			SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
		}
		int num157 = 0;
		if (Main.expertMode)
		{
			for (int num158 = 0; num158 < 200; num158++)
			{
				if (Main.npc[num158].active && Main.npc[num158].type == type + 1)
				{
					num157++;
				}
			}
			defense += num157 * 25;
			if ((num157 < 2 || (double)life < (double)lifeMax * 0.75) && this.ai[1] == 0f)
			{
				float num159 = 80f;
				if (num157 == 0)
				{
					num159 /= 2f;
				}
				if (Main.getGoodWorld)
				{
					num159 *= 0.8f;
				}
				if (Main.netMode != 1 && this.ai[2] % num159 == 0f)
				{
					Vector2 center3 = base.Center;
					float num160 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - center3.X;
					float num161 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - center3.Y;
					float num162 = MathF.Sqrt(num160 * num160 + num161 * num161);
					if (Collision.CanHit(center3, 1, 1, Main.player[target].position, Main.player[target].width, Main.player[target].height))
					{
						float num163 = 3f;
						if (num157 == 0)
						{
							num163 += 2f;
						}
						float num164 = Main.player[target].position.X + (float)Main.player[target].width * 0.5f - center3.X + (float)Main.rand.Next(-20, 21);
						float num165 = Main.player[target].position.Y + (float)Main.player[target].height * 0.5f - center3.Y + (float)Main.rand.Next(-20, 21);
						float num166 = MathF.Sqrt(num164 * num164 + num165 * num165);
						num166 = num163 / num166;
						num164 *= num166;
						num165 *= num166;
						Vector2 vector19 = new Vector2(num164 * 1f + (float)Main.rand.Next(-50, 51) * 0.01f, num165 * 1f + (float)Main.rand.Next(-50, 51) * 0.01f);
						vector19.Normalize();
						vector19 *= num163;
						vector19 += velocity;
						num164 = vector19.X;
						num165 = vector19.Y;
						int attackDamage_ForProjectiles = GetAttackDamage_ForProjectiles(17f, 17f);
						int num167 = 270;
						center3 += vector19 * 5f;
						int num168 = Projectile.NewProjectile(GetProjectileSpawnSource(), center3.X, center3.Y, num164, num165, num167, attackDamage_ForProjectiles, 0f, Main.myPlayer, -1f);
						Main.projectile[num168].timeLeft = 300;
					}
				}
			}
		}
		if (this.ai[1] == 0f)
		{
			damage = defDamage;
			this.ai[2] += 1f;
			if (this.ai[2] >= 800f)
			{
				this.ai[2] = 0f;
				this.ai[1] = 1f;
				TargetClosest();
				netUpdate = true;
			}
			rotation = velocity.X / 15f;
			float num169 = 0.02f;
			float num170 = 2f;
			float num171 = 0.05f;
			float num172 = 8f;
			if (Main.expertMode)
			{
				num169 = 0.03f;
				num170 = 4f;
				num171 = 0.07f;
				num172 = 9.5f;
			}
			if (Main.getGoodWorld)
			{
				num169 += 0.01f;
				num170 += 1f;
				num171 += 0.05f;
				num172 += 2f;
			}
			if (position.Y > Main.player[target].position.Y - 250f)
			{
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.98f;
				}
				velocity.Y -= num169;
				if (velocity.Y > num170)
				{
					velocity.Y = num170;
				}
			}
			else if (position.Y < Main.player[target].position.Y - 250f)
			{
				if (velocity.Y < 0f)
				{
					velocity.Y *= 0.98f;
				}
				velocity.Y += num169;
				if (velocity.Y < 0f - num170)
				{
					velocity.Y = 0f - num170;
				}
			}
			if (position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2))
			{
				if (velocity.X > 0f)
				{
					velocity.X *= 0.98f;
				}
				velocity.X -= num171;
				if (velocity.X > num172)
				{
					velocity.X = num172;
				}
			}
			if (position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2))
			{
				if (velocity.X < 0f)
				{
					velocity.X *= 0.98f;
				}
				velocity.X += num171;
				if (velocity.X < 0f - num172)
				{
					velocity.X = 0f - num172;
				}
			}
		}
		else if (this.ai[1] == 1f)
		{
			defense -= 10;
			this.ai[2] += 1f;
			if (this.ai[2] == 2f)
			{
				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
			}
			if (this.ai[2] >= 400f)
			{
				this.ai[2] = 0f;
				this.ai[1] = 0f;
			}
			rotation += (float)direction * 0.3f;
			Vector2 vector20 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num173 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector20.X;
			float num174 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector20.Y;
			float num175 = MathF.Sqrt(num173 * num173 + num174 * num174);
			float num176 = 1.5f;
			damage = GetAttackDamage_LerpBetweenFinalValues(defDamage, (float)defDamage * 1.3f);
			if (Main.expertMode)
			{
				num176 = 3.5f;
				if (num175 > 150f)
				{
					num176 *= 1.05f;
				}
				if (num175 > 200f)
				{
					num176 *= 1.1f;
				}
				if (num175 > 250f)
				{
					num176 *= 1.1f;
				}
				if (num175 > 300f)
				{
					num176 *= 1.1f;
				}
				if (num175 > 350f)
				{
					num176 *= 1.1f;
				}
				if (num175 > 400f)
				{
					num176 *= 1.1f;
				}
				if (num175 > 450f)
				{
					num176 *= 1.1f;
				}
				if (num175 > 500f)
				{
					num176 *= 1.1f;
				}
				if (num175 > 550f)
				{
					num176 *= 1.1f;
				}
				if (num175 > 600f)
				{
					num176 *= 1.1f;
				}
				switch (num157)
				{
				case 0:
					num176 *= 1.1f;
					break;
				case 1:
					num176 *= 1.05f;
					break;
				}
			}
			if (Main.getGoodWorld)
			{
				num176 *= 1.3f;
			}
			num175 = num176 / num175;
			velocity.X = num173 * num175;
			velocity.Y = num174 * num175;
		}
		else if (this.ai[1] == 2f)
		{
			damage = 1000;
			defense = 9999;
			rotation += (float)direction * 0.3f;
			Vector2 vector21 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num177 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector21.X;
			float num178 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector21.Y;
			float num179 = MathF.Sqrt(num177 * num177 + num178 * num178);
			num179 = 8f / num179;
			velocity.X = num177 * num179;
			velocity.Y = num178 * num179;
		}
		else if (this.ai[1] == 3f)
		{
			velocity.Y += 0.1f;
			if (velocity.Y < 0f)
			{
				velocity.Y *= 0.95f;
			}
			velocity.X *= 0.95f;
			EncourageDespawn(50);
		}
		if (this.ai[1] != 2f && this.ai[1] != 3f && type != 68 && (num157 != 0 || !Main.expertMode))
		{
			int num180 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) - 15f - velocity.X * 5f, position.Y + (float)height - 2f), 30, 10, 5, (0f - velocity.X) * 0.2f, 3f, 0, default, 2f);
			Main.dust[num180].noGravity = true;
			Main.dust[num180].velocity.X *= 1.3f;
			Main.dust[num180].velocity.X += velocity.X * 0.4f;
			Main.dust[num180].velocity.Y += 2f + velocity.Y;
			for (int num181 = 0; num181 < 2; num181++)
			{
				num180 = Dust.NewDust(new Vector2(position.X, position.Y + 120f), width, 60, 5, velocity.X, velocity.Y, 0, default, 2f);
				Main.dust[num180].noGravity = true;
				Dust dust = Main.dust[num180];
				dust.velocity -= velocity;
				Main.dust[num180].velocity.Y += 5f;
			}
		}
		return;
	}
	if (aiStyle == 12)
	{
		spriteDirection = -(int)this.ai[0];
		if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].aiStyle != 11)
		{
			this.ai[2] += 10f;
			if (this.ai[2] > 50f || Main.netMode != 2)
			{
				life = -1;
				HitEffect();
				active = false;
			}
		}
		if (this.ai[2] == 0f || this.ai[2] == 3f)
		{
			if (Main.npc[(int)this.ai[1]].ai[1] == 3f)
			{
				EncourageDespawn(10);
			}
			if (Main.npc[(int)this.ai[1]].ai[1] != 0f)
			{
				if (position.Y > Main.npc[(int)this.ai[1]].position.Y - 100f)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.96f;
					}
					velocity.Y -= 0.07f;
					if (velocity.Y > 6f)
					{
						velocity.Y = 6f;
					}
				}
				else if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 100f)
				{
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.96f;
					}
					velocity.Y += 0.07f;
					if (velocity.Y < -6f)
					{
						velocity.Y = -6f;
					}
				}
				if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
				{
					if (velocity.X > 0f)
					{
						velocity.X *= 0.96f;
					}
					velocity.X -= 0.1f;
					if (velocity.X > 8f)
					{
						velocity.X = 8f;
					}
				}
				if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 120f * this.ai[0])
				{
					if (velocity.X < 0f)
					{
						velocity.X *= 0.96f;
					}
					velocity.X += 0.1f;
					if (velocity.X < -8f)
					{
						velocity.X = -8f;
					}
				}
			}
			else
			{
				this.ai[3] += 1f;
				if (Main.expertMode)
				{
					this.ai[3] += 0.5f;
				}
				if (this.ai[3] >= 300f)
				{
					this.ai[2] += 1f;
					this.ai[3] = 0f;
					netUpdate = true;
				}
				if (Main.expertMode)
				{
					if (position.Y > Main.npc[(int)this.ai[1]].position.Y + 230f)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y -= 0.04f;
						if (velocity.Y > 3f)
						{
							velocity.Y = 3f;
						}
					}
					else if (position.Y < Main.npc[(int)this.ai[1]].position.Y + 230f)
					{
						if (velocity.Y < 0f)
						{
							velocity.Y *= 0.96f;
						}
						velocity.Y += 0.04f;
						if (velocity.Y < -3f)
						{
							velocity.Y = -3f;
						}
					}
					if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
					{
						if (velocity.X > 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X -= 0.07f;
						if (velocity.X > 8f)
						{
							velocity.X = 8f;
						}
					}
					if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
					{
						if (velocity.X < 0f)
						{
							velocity.X *= 0.96f;
						}
						velocity.X += 0.07f;
						if (velocity.X < -8f)
						{
							velocity.X = -8f;
						}
					}
				}
				if (position.Y > Main.npc[(int)this.ai[1]].position.Y + 230f)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.96f;
					}
					velocity.Y -= 0.04f;
					if (velocity.Y > 3f)
					{
						velocity.Y = 3f;
					}
				}
				else if (position.Y < Main.npc[(int)this.ai[1]].position.Y + 230f)
				{
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.96f;
					}
					velocity.Y += 0.04f;
					if (velocity.Y < -3f)
					{
						velocity.Y = -3f;
					}
				}
				if (position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
				{
					if (velocity.X > 0f)
					{
						velocity.X *= 0.96f;
					}
					velocity.X -= 0.07f;
					if (velocity.X > 8f)
					{
						velocity.X = 8f;
					}
				}
				if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0])
				{
					if (velocity.X < 0f)
					{
						velocity.X *= 0.96f;
					}
					velocity.X += 0.07f;
					if (velocity.X < -8f)
					{
						velocity.X = -8f;
					}
				}
			}
			Vector2 vector22 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num182 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector22.X;
			float num183 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector22.Y;
			float num184 = MathF.Sqrt(num182 * num182 + num183 * num183);
			rotation = MathF.Atan2(num183, num182) + 1.57f;
		}
		else if (this.ai[2] == 1f)
		{
			Vector2 vector23 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num185 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector23.X;
			float num186 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector23.Y;
			float num187 = MathF.Sqrt(num185 * num185 + num186 * num186);
			rotation = MathF.Atan2(num186, num185) + 1.57f;
			velocity.X *= 0.95f;
			velocity.Y -= 0.1f;
			if (Main.expertMode)
			{
				velocity.Y -= 0.06f;
				if (velocity.Y < -13f)
				{
					velocity.Y = -13f;
				}
			}
			else if (velocity.Y < -8f)
			{
				velocity.Y = -8f;
			}
			if (position.Y < Main.npc[(int)this.ai[1]].position.Y - 200f)
			{
				TargetClosest();
				this.ai[2] = 2f;
				vector23 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				num185 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector23.X;
				num186 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector23.Y;
				num187 = MathF.Sqrt(num185 * num185 + num186 * num186);
				num187 = ((!Main.expertMode) ? (18f / num187) : (21f / num187));
				velocity.X = num185 * num187;
				velocity.Y = num186 * num187;
				netUpdate = true;
			}
		}
		else if (this.ai[2] == 2f)
		{
			if (position.Y > Main.player[target].position.Y || velocity.Y < 0f)
			{
				this.ai[2] = 3f;
			}
		}
		else if (this.ai[2] == 4f)
		{
			Vector2 vector24 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num188 = Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 200f * this.ai[0] - vector24.X;
			float num189 = Main.npc[(int)this.ai[1]].position.Y + 230f - vector24.Y;
			float num190 = MathF.Sqrt(num188 * num188 + num189 * num189);
			rotation = MathF.Atan2(num189, num188) + 1.57f;
			velocity.Y *= 0.95f;
			velocity.X += 0.1f * (0f - this.ai[0]);
			if (Main.expertMode)
			{
				velocity.X += 0.07f * (0f - this.ai[0]);
				if (velocity.X < -12f)
				{
					velocity.X = -12f;
				}
				else if (velocity.X > 12f)
				{
					velocity.X = 12f;
				}
			}
			else if (velocity.X < -8f)
			{
				velocity.X = -8f;
			}
			else if (velocity.X > 8f)
			{
				velocity.X = 8f;
			}
			if (position.X + (float)(width / 2) < Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) - 500f || position.X + (float)(width / 2) > Main.npc[(int)this.ai[1]].position.X + (float)(Main.npc[(int)this.ai[1]].width / 2) + 500f)
			{
				TargetClosest();
				this.ai[2] = 5f;
				vector24 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				num188 = Main.player[target].position.X + (float)(Main.player[target].width / 2) - vector24.X;
				num189 = Main.player[target].position.Y + (float)(Main.player[target].height / 2) - vector24.Y;
				num190 = MathF.Sqrt(num188 * num188 + num189 * num189);
				num190 = ((!Main.expertMode) ? (17f / num190) : (22f / num190));
				velocity.X = num188 * num190;
				velocity.Y = num189 * num190;
				netUpdate = true;
			}
		}
		else if (this.ai[2] == 5f && ((velocity.X > 0f && position.X + (float)(width / 2) > Main.player[target].position.X + (float)(Main.player[target].width / 2)) || (velocity.X < 0f && position.X + (float)(width / 2) < Main.player[target].position.X + (float)(Main.player[target].width / 2))))
		{
			this.ai[2] = 0f;
		}
		return;
	}