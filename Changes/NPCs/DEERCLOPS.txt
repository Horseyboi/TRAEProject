private void AI_123_Deerclops()
{
	int num = 15;
	NPCAimedTarget targetData = GetTargetData();
	bool haltMovement = false;
	bool goHome = false;
	bool flag = Distance(targetData.Center) >= 450f;
	localAI[3] = MathHelper.Clamp(localAI[3] + (float)flag.ToDirectionInt(), 0f, 30f);
	dontTakeDamage = localAI[3] >= 30f;
	float lifePercent = (float)life / (float)lifeMax;
	bool expertMode = Main.expertMode;
	int shadowHandDamage = 10;
	float num2 = Utils.Remap(localAI[3], 0f, 30f, 0f, 1f);
	if (num2 > 0f)
	{
		float num3 = Main.rand.NextFloat() * num2 * 3f;
		while (num3 > 0f)
		{
			num3 -= 1f;
			Dust.NewDustDirect(position, width, height, 109, 0f, -3f, 0, default(Color), 1.4f).noGravity = true;
		}
	}
	if (homeTileX == -1 && homeTileY == -1)
	{
		Point point = base.Bottom.ToTileCoordinates();
		homeTileX = point.X;
		homeTileY = point.Y;
		this.ai[2] = homeTileX;
		this.ai[3] = homeTileY;
		netUpdate = true;
		timeLeft = 86400;
	}
	timeLeft -= Main.dayRate;
	if (timeLeft < 0)
	{
		timeLeft = 0;
	}
	homeTileX = (int)this.ai[2];
	homeTileY = (int)this.ai[3];
	if (!expertMode)
	{
		localAI[2] = 0f;
	}
	if (expertMode && Main.netMode != 1)
	{
		SpawnPassiveShadowHands(lifePercent, shadowHandDamage);
	}
	switch ((int)this.ai[0])
	{
	case -1:
		localAI[3] = -10f;
		break;
	case 6:
	{
		TargetClosest(faceTarget: false);
		targetData = GetTargetData();
		if (Main.netMode != 1)
		{
			if (!ShouldRunAway(ref targetData, isChasing: false))
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				localAI[1] = 0f;
				netUpdate = true;
				break;
			}
			if (timeLeft <= 0)
			{
				this.ai[0] = 8f;
				this.ai[1] = 0f;
				localAI[1] = 0f;
				netUpdate = true;
				break;
			}
		}
		if (direction != oldDirection)
		{
			netUpdate = true;
		}
		goHome = true;
		this.ai[1] += 1f;
		Vector2 other = new Vector2(homeTileX * 16, homeTileY * 16);
		bool flag2 = base.Top.Y > other.Y + 1600f;
		bool num4 = Distance(other) < 1020f;
		Distance(targetData.Center);
		float num5 = this.ai[1] % 600f;
		if (num4 && num5 < 420f)
		{
			haltMovement = true;
		}
		bool flag3 = false;
		int num6 = 300;
		if (flag2 && this.ai[1] >= (float)num6)
		{
			flag3 = true;
		}
		int num7 = 1500;
		if (!num4 && this.ai[1] >= (float)num7)
		{
			flag3 = true;
		}
		if (flag3)
		{
			this.ai[0] = 7f;
			this.ai[1] = 0f;
			localAI[1] = 0f;
			netUpdate = true;
		}
		break;
	}
	case 0:
	{
		TargetClosest();
		targetData = GetTargetData();
		if (ShouldRunAway(ref targetData, isChasing: true))
		{
			this.ai[0] = 6f;
			this.ai[1] = 0f;
			localAI[1] = 0f;
			netUpdate = true;
			break;
		}
		this.ai[1] += 1f;
		Vector2 vector = base.Bottom + new Vector2(0f, -32f);
		Vector2 vector2 = targetData.Hitbox.ClosestPointInRect(vector);
		Vector2 vector3 = vector2 - vector;
		(vector2 - base.Center).Length();
		float num15 = 0.6f;
		bool flag4 = Math.Abs(vector3.X) >= Math.Abs(vector3.Y) * num15 || vector3.Length() < 48f;
		bool flag5 = vector3.Y <= (float)(100 + targetData.Height) && vector3.Y >= -200f;
		if (Math.Abs(vector3.X) < 120f && flag5 && velocity.Y == 0f && localAI[1] >= 2f)
		{
			velocity.X = 0f;
			this.ai[0] = 4f;
			this.ai[1] = 0f;
			localAI[1] = 0f;
			netUpdate = true;
			break;
		}
		if (Math.Abs(vector3.X) < 120f && flag5 && velocity.Y == 0f && flag4)
		{
			velocity.X = 0f;
			this.ai[0] = 1f;
			this.ai[1] = 0f;
			localAI[1] += 1f;
			netUpdate = true;
			break;
		}
		bool flag6 = this.ai[1] >= 240f;
		if (velocity.Y == 0f && velocity.X != 0f && flag6)
		{
			velocity.X = 0f;
			this.ai[0] = 2f;
			this.ai[1] = 0f;
			localAI[1] = 0f;
			netUpdate = true;
			break;
		}
		bool flag7 = this.ai[1] >= 90f;
		if (velocity.Y == 0f && velocity.X == 0f && flag7)
		{
			velocity.X = 0f;
			this.ai[0] = 5f;
			this.ai[1] = 0f;
			localAI[1] = 0f;
			netUpdate = true;
			break;
		}
		bool flag8 = this.ai[1] >= 120f;
		int num16 = 32;
		bool flag9 = targetData.Type == NPCTargetType.Player && !Main.player[target].buffImmune[num16] && Main.player[target].FindBuffIndex(num16) == -1;
		if (velocity.Y == 0f && flag8 && flag9 && Math.Abs(vector3.X) > 100f)
		{
			velocity.X = 0f;
			this.ai[0] = 3f;
			this.ai[1] = 0f;
			localAI[1] = 0f;
			netUpdate = true;
		}
		break;
	}
	case 1:
		this.ai[1] += 1f;
		haltMovement = true;
		AI_123_Deerclops_MakeSpikesForward(1, targetData);
		if (this.ai[1] >= 80f)
		{
			this.ai[0] = 0f;
			this.ai[1] = 0f;
			netUpdate = true;
		}
		break;
	case 4:
		this.ai[1] += 1f;
		haltMovement = true;
		TargetClosest();
		AI_123_Deerclops_MakeSpikesBothSides(1, targetData);
		if (this.ai[1] >= 90f)
		{
			this.ai[0] = 0f;
			this.ai[1] = 0f;
			netUpdate = true;
		}
		break;
	case 2:
	{
		int num8 = 4;
		int num9 = 8 * num8;
		this.ai[1] += 1f;
		if (this.ai[1] == (float)(num9 - 20))
		{
			SoundEngine.PlaySound(SoundID.DeerclopsScream, base.Center);
		}
		if (this.ai[1] == (float)num9)
		{
			SoundEngine.PlaySound(SoundID.DeerclopsRubbleAttack, base.Center);
		}
		haltMovement = true;
		if (Main.netMode != 1 && this.ai[1] >= (float)num9)
		{
			Point sourceTileCoords = base.Top.ToTileCoordinates();
			int num10 = 20;
			int distancedByThisManyTiles = 1;
			float upBiasPerSpike = 200f;
			sourceTileCoords.X += direction * 3;
			sourceTileCoords.Y -= 10;
			int num11 = (int)this.ai[1] - num9;
			if (num11 == 0)
			{
				PunchCameraModifier modifier4 = new PunchCameraModifier(base.Center, new Vector2(0f, -1f), 20f, 6f, 30, 1000f, "Deerclops");
				Main.instance.CameraModifiers.Add(modifier4);
			}
			int num12 = 1;
			int num13 = num11 / num12 * num12;
			int num14 = num13 + num12;
			if (num11 % num12 != 0)
			{
				num14 = num13;
			}
			for (int j = num13; j < num14 && j < num10; j++)
			{
				AI_123_Deerclops_ShootRubbleUp(ref targetData, ref sourceTileCoords, num10, distancedByThisManyTiles, upBiasPerSpike, j);
			}
		}
		if (this.ai[1] >= 60f)
		{
			this.ai[0] = 0f;
			this.ai[1] = 0f;
			netUpdate = true;
		}
		break;
	}
	case 3:
		if (this.ai[1] == 30f)
		{
			SoundEngine.PlaySound(SoundID.DeerclopsScream, base.Center);
		}
		this.ai[1] += 1f;
		haltMovement = true;
		if ((int)this.ai[1] % 4 == 0 && this.ai[1] >= 28f)
		{
			PunchCameraModifier modifier5 = new PunchCameraModifier(base.Center, (Main.rand.NextFloat() * ((float)Math.PI * 2f)).ToRotationVector2(), 20f, 6f, 20, 1000f, "Deerclops");
			Main.instance.CameraModifiers.Add(modifier5);
			if (Main.netMode != 2)
			{
				Player player = Main.player[Main.myPlayer];
				_ = Main.myPlayer;
				int num17 = 32;
				int timeToAdd = 720;
				if (!player.dead && player.active && player.FindBuffIndex(num17) == -1 && (player.Center - base.Center).Length() < 800f && !player.creativeGodMode)
				{
					player.AddBuff(num17, timeToAdd);
				}
			}
		}
		if (this.ai[1] == 30f)
		{
			TargetClosest();
		}
		if (this.ai[1] >= 60f)
		{
			this.ai[0] = 0f;
			this.ai[1] = 0f;
			netUpdate = true;
		}
		break;
	case 7:
		if (this.ai[1] == 30f)
		{
			SoundEngine.PlaySound(SoundID.DeerclopsScream, base.Center);
		}
		this.ai[1] += 1f;
		haltMovement = true;
		if ((int)this.ai[1] % 4 == 0 && this.ai[1] >= 28f)
		{
			PunchCameraModifier modifier3 = new PunchCameraModifier(base.Center, (Main.rand.NextFloat() * ((float)Math.PI * 2f)).ToRotationVector2(), 20f, 6f, 20, 1000f, "Deerclops");
			Main.instance.CameraModifiers.Add(modifier3);
		}
		if (this.ai[1] == 40f)
		{
			TargetClosest();
			if (Main.netMode != 1)
			{
				netUpdate = true;
				base.Bottom = new Vector2(homeTileX * 16, homeTileY * 16);
			}
		}
		if (this.ai[1] >= 60f)
		{
			this.ai[0] = 0f;
			this.ai[1] = 0f;
			netUpdate = true;
		}
		break;
	case 8:
		if (this.ai[1] == 30f)
		{
			SoundEngine.PlaySound(SoundID.DeerclopsScream, base.Center);
		}
		this.ai[1] += 1f;
		haltMovement = true;
		if ((int)this.ai[1] % 4 == 0 && this.ai[1] >= 28f)
		{
			PunchCameraModifier modifier2 = new PunchCameraModifier(base.Center, (Main.rand.NextFloat() * ((float)Math.PI * 2f)).ToRotationVector2(), 20f, 6f, 20, 1000f, "Deerclops");
			Main.instance.CameraModifiers.Add(modifier2);
		}
		if (this.ai[1] >= 40f)
		{
			life = -1;
			HitEffect();
			active = false;
			if (Main.netMode != 1)
			{
				NetMessage.SendData(28, -1, -1, null, whoAmI, -1f);
			}
			return;
		}
		break;
	case 5:
		if (this.ai[1] == 30f)
		{
			SoundEngine.PlaySound(SoundID.DeerclopsScream, base.Center);
		}
		this.ai[1] += 1f;
		haltMovement = true;
		if ((int)this.ai[1] % 4 == 0 && this.ai[1] >= 28f)
		{
			PunchCameraModifier modifier = new PunchCameraModifier(base.Center, (Main.rand.NextFloat() * ((float)Math.PI * 2f)).ToRotationVector2(), 20f, 6f, 20, 1000f, "Deerclops");
			Main.instance.CameraModifiers.Add(modifier);
		}
		if (this.ai[1] == 30f)
		{
			TargetClosest();
			if (Main.netMode != 1)
			{
				for (int i = 0; i < 6; i++)
				{
					Projectile.RandomizeInsanityShadowFor(Main.player[target], isHostile: true, out var spawnposition, out var spawnvelocity, out var ai, out var ai2);
					Projectile.NewProjectile(GetSpawnSource_ForProjectile(), spawnposition, spawnvelocity, 965, num, 0f, Main.myPlayer, ai, ai2);
				}
			}
		}
		if (this.ai[1] >= 60f)
		{
			this.ai[0] = 0f;
			this.ai[1] = 0f;
			netUpdate = true;
		}
		break;
	}
private void AI_123_Deerclops_FindSpotToSpawnSpike(int howMany, int whichOne, ref int x, ref int y)
{
	if (WorldGen.ActiveAndWalkableTile(x, y))
	{
		return;
	}
	Rectangle rectangle = targetRect;
	int num = rectangle.Center.X / 16;
	int num2 = (rectangle.Bottom - 16) / 16;
	int num3 = ((num2 - y > 0) ? 1 : (-1));
	int num4 = y;
	for (int i = 1; i <= 10; i++)
	{
		int num5 = y + num3 * i;
		if (num5 >= 20 && num5 <= Main.maxTilesY - 20 && WorldGen.ActiveAndWalkableTile(x, num5))
		{
			num4 = num5;
		}
	}
	if (num4 != y)
	{
		y = num4;
		return;
	}
	y = (int)MathHelper.Lerp(num2, y, (float)Math.Abs(num - x) * 0.1f);
	for (int j = 0; j < 4; j++)
	{
		int num6 = y + j;
		if (num6 >= 20 && num6 <= Main.maxTilesY - 20 && WorldGen.ActiveAndWalkableTile(x, num6))
		{
			y = num6;
			break;
		}
	}
}
private void AI_123_Deerclops_MakeSpikesBothSides(int AISLOT_PhaseCounter, NPCAimedTarget targetData)
{
	if (Main.netMode == 1)
	{
		return;
	}
	int num = 56;
	if (!(ai[AISLOT_PhaseCounter] < (float)num))
	{
		Point sourceTileCoords = base.Bottom.ToTileCoordinates();
		int num2 = 15;
		int num3 = 1;
		int num4 = (int)ai[AISLOT_PhaseCounter] - num;
		if (num4 == 0)
		{
			PunchCameraModifier modifier = new PunchCameraModifier(base.Center, new Vector2(0f, 1f), 20f, 6f, 30, 1000f, "Deerclops");
			Main.instance.CameraModifiers.Add(modifier);
		}
		int num5 = 2;
		int num6 = num4 / num5 * num5;
		int num7 = num6 + num5;
		if (num4 % num5 != 0)
		{
			num7 = num6;
		}
		for (int i = num6; i >= 0 && i < num7 && i < num2; i++)
		{
			int xOffset = i * num3;
			AI_123_Deerclops_TryMakingSpike(ref sourceTileCoords, direction, num2, -i, xOffset);
			AI_123_Deerclops_TryMakingSpike(ref sourceTileCoords, -direction, num2, -i, xOffset);
		}
	}
}
private void AI_123_Deerclops_MakeSpikesForward(int AISLOT_PhaseCounter, NPCAimedTarget targetData)
{
	int num = 9;
	int num2 = 4;
	if (Main.netMode == 1)
	{
		return;
	}
	int num3 = num * num2;
	if (!(ai[AISLOT_PhaseCounter] < (float)num3))
	{
		Point sourceTileCoords = base.Bottom.ToTileCoordinates();
		int num4 = 20;
		int num5 = 1;
		sourceTileCoords.X += direction * 3;
		int num6 = (int)ai[AISLOT_PhaseCounter] - num3;
		if (num6 == 0)
		{
			PunchCameraModifier modifier = new PunchCameraModifier(base.Center, new Vector2(0f, 1f), 20f, 6f, 30, 1000f, "Deerclops");
			Main.instance.CameraModifiers.Add(modifier);
		}
		int num7 = 4;
		int num8 = num6 / num7 * num7;
		int num9 = num8 + num7;
		if (num6 % num7 != 0)
		{
			num9 = num8;
		}
		for (int i = num8; i < num9 && i < num4; i++)
		{
			int xOffset = i * num5;
			AI_123_Deerclops_TryMakingSpike(ref sourceTileCoords, direction, num4, i, xOffset);
		}
	}
}
private void AI_123_Deerclops_TryMakingSpike(ref Point sourceTileCoords, int dir, int howMany, int whichOne, int xOffset)
{
	int num = 13;
	int num2 = sourceTileCoords.X + xOffset * dir;
	int num3 = AI_123_Deerclops_TryMakingSpike_FindBestY(ref sourceTileCoords, num2);
	if (WorldGen.ActiveAndWalkableTile(num2, num3))
	{
		Vector2 vector = new Vector2(num2 * 16 + 8, num3 * 16 - 8);
		Vector2 vector2 = new Vector2(0f, -1f).RotatedBy((float)(whichOne * dir) * 0.7f * ((float)Math.PI / 4f / (float)howMany));
		Projectile.NewProjectile(GetSpawnSource_ForProjectile(), vector, vector2, 961, num, 0f, Main.myPlayer, 0f, 0.1f + Main.rand.NextFloat() * 0.1f + (float)xOffset * 1.1f / (float)howMany);
	}
}
private int AI_123_Deerclops_TryMakingSpike_FindBestY(ref Point sourceTileCoords, int x)
{
	int num = sourceTileCoords.Y;
	NPCAimedTarget targetData = GetTargetData();
	if (!targetData.Invalid)
	{
		Rectangle hitbox = targetData.Hitbox;
		Vector2 vector = new Vector2(hitbox.Center.X, hitbox.Bottom);
		int num2 = (int)(vector.Y / 16f);
		int num3 = Math.Sign(num2 - num);
		int num4 = num2 + num3 * 15;
		int? num5 = null;
		float num6 = float.PositiveInfinity;
		for (int i = num; i != num4; i += num3)
		{
			if (WorldGen.ActiveAndWalkableTile(x, i))
			{
				float num7 = new Point(x, i).ToWorldCoordinates().Distance(vector);
				if (!num5.HasValue || !(num7 >= num6))
				{
					num5 = i;
					num6 = num7;
				}
			}
		}
		if (num5.HasValue)
		{
			num = num5.Value;
		}
	}
	for (int j = 0; j < 20; j++)
	{
		if (num < 10)
		{
			break;
		}
		if (!WorldGen.SolidTile(x, num))
		{
			break;
		}
		num--;
	}
	for (int k = 0; k < 20; k++)
	{
		if (num > Main.maxTilesY - 10)
		{
			break;
		}
		if (WorldGen.ActiveAndWalkableTile(x, num))
		{
			break;
		}
		num++;
	}
	return num;
}
